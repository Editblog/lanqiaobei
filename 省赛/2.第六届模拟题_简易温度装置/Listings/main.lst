C51 COMPILER V9.60.0.0   MAIN                                                              04/09/2021 10:13:34 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\driver) DEBUG OBJECTEXTEND PRIN
                    -T(.\Listings\main.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <stc15f2k60s2.h>
   2          #include "intrins.h"
   3          #include "onewire.h"
   4          #define u8 unsigned char
   5          #define u16 unsigned int
   6                  
   7          u8 code du[]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
   8          u8 code wei[]={0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};
   9          
  10          void All_Init(void)
  11          {
  12   1              //LED
  13   1          P2 &= 0X1F;   //关573
  14   1              P0 =  0XFF;   //预送数据
  15   1              P2 |= 0X80;   //开相应573
  16   1              P0 =  0XFF;   //送数据
  17   1              P2 &= 0X1F;   //关573
  18   1              
  19   1              //蜂鸣器
  20   1          P2 &= 0X1F;   //关573
  21   1              P0 =  0X00;   //预送数据
  22   1              P2 |= 0XA0;   //开相应573
  23   1              P0 =  0X00;   //送数据
  24   1              P2 &= 0X1F;   //关573
  25   1              
  26   1              //数码管位选
  27   1              P2 &= 0X1F;   //关573
  28   1              P0 =  0X00;   //预送数据
  29   1              P2 |= 0XC0;   //开相应573
  30   1              P0 =  0X00;   //送数据
  31   1              P2 &= 0X1F;   //关573
  32   1              
  33   1              //数码管段选
  34   1              P2 &= 0X1F;   //关573
  35   1              P0 =  0XFF;   //预送数据
  36   1              P2 |= 0XE0;   //开相应573
  37   1              P0 =  0XFF;   //送数据
  38   1              P2 &= 0X1F;   //关573
  39   1      }
  40          
  41          void Timer0Init(void)           //1毫秒@11.0592MHz
  42          {
  43   1              AUXR |= 0x80;           //定时器时钟1T模式
  44   1              TMOD &= 0xF0;           //设置定时器模式
  45   1              TL0 = 0xCD;             //设置定时初值
  46   1              TH0 = 0xD4;             //设置定时初值
  47   1              TF0 = 0;                //清除TF0标志
  48   1              TR0 = 1;                //定时器0开始计时
  49   1              ET0=1;
  50   1              EA=1;
  51   1      }
  52          
  53          void Delay500ms()               //@11.0592MHz
  54          {
C51 COMPILER V9.60.0.0   MAIN                                                              04/09/2021 10:13:34 PAGE 2   

  55   1              unsigned char i, j, k;
  56   1      
  57   1              _nop_();
  58   1              _nop_();
  59   1              i = 22;
  60   1              j = 3;
  61   1              k = 227;
  62   1              do
  63   1              {
  64   2                      do
  65   2                      {
  66   3                              while (--k);
  67   3                      } while (--j);
  68   2              } while (--i);
  69   1      }
  70          
  71          
  72          #define KEY P3
  73          #define NO_KEY          0xff    //无按键按下
  74          #define KEY_STATE0  0           //判断按键按下
  75          #define KEY_STATE1  1           //确认按键按下
  76          #define KEY_STATE2  2           //释放按键
  77          unsigned char Key_Scan()
  78          {
  79   1              static unsigned char key_state=KEY_STATE0; //定义为静态变量，用于保存每次按键的状态
  80   1              u8 key_value=0,key_temp;                                   //key_val:返回的键值；key_temp:读取的IO状态
  81   1              u8 key1,key2;
  82   1      
  83   1              P30=0;P31=0;P32=0;P33=0;P34=1;P35=1;P42=1;P44=1;
  84   1              if(P44==0)      key1=0x70;
  85   1              if(P42==0)      key1=0xb0;
  86   1              if(P35==0)      key1=0xd0;
  87   1              if(P34==0)      key1=0xe0;
  88   1              if((P34==1)&&(P35==1)&&(P42==1)&&(P44==1))      key1=0xf0;
  89   1      
  90   1              P30=1;P31=1;P32=1;P33=1;P34=0;P35=0;P42=0;P44=0;
  91   1              if(P30==0)      key2=0x0e;
  92   1              if(P31==0)      key2=0x0d;
  93   1              if(P32==0)      key2=0x0b;
  94   1              if(P33==0)      key2=0x07;
  95   1              if((P30==1)&&(P31==1)&&(P32==1)&&(P33==1))      key2=0x0f;
  96   1              key_temp=key1|key2;
  97   1      
  98   1              switch(key_state)                             
  99   1              {
 100   2                      case KEY_STATE0:                                //判断按键按下
 101   2                              if(key_temp!=NO_KEY)
 102   2                              {
 103   3                                      key_state=KEY_STATE1;   //有键按下，就转到状态1    
 104   3                              }
 105   2                              break;
 106   2      
 107   2                      case KEY_STATE1:                                //经过10ms，再次确认按键按下，用于消抖
 108   2                              if(key_temp==NO_KEY)            
 109   2                              {
 110   3                                      key_state=KEY_STATE0;   //如果是抖动，则回到状态0
 111   3                              }
 112   2                              else                                            //如果不是抖动，则返回对应的键值
 113   2                              {
 114   3                                      switch(key_temp)                             
 115   3                                      {
 116   4                                              case 0x77: key_value=4;break;
C51 COMPILER V9.60.0.0   MAIN                                                              04/09/2021 10:13:34 PAGE 3   

 117   4                                              case 0x7b: key_value=5;break;
 118   4                                              case 0x7d: key_value=6;break;
 119   4                                              case 0x7e: key_value=7;break;
 120   4      
 121   4                                              case 0xb7: key_value=8;break;
 122   4                                              case 0xbb: key_value=9;break;
 123   4                                              case 0xbd: key_value=10;break;
 124   4                                              case 0xbe: key_value=11;break;
 125   4      
 126   4                                              case 0xd7: key_value=12;break;
 127   4                                              case 0xdb: key_value=13;break;
 128   4                                              case 0xdd: key_value=14;break;
 129   4                                              case 0xde: key_value=15;break;
 130   4      
 131   4                                              case 0xe7: key_value=16;break;
 132   4                                              case 0xeb: key_value=17;break;
 133   4                                              case 0xed: key_value=18;break;
 134   4                                              case 0xee: key_value=19;break;  
 135   4                                      }
 136   3                                      key_state=KEY_STATE2;
 137   3                              }
 138   2                              break;
 139   2      
 140   2                      case KEY_STATE2:                        //经过10ms，判断是否释放按键
 141   2                              if(key_temp==NO_KEY)
 142   2                              {
 143   3                                      key_state=KEY_STATE0;
 144   3                              }
 145   2                              break;
 146   2              }
 147   1              return key_value;
 148   1      }
 149          
 150          
 151          u8 key_value=0;
 152          u8 temperture;
 153          u8 temp_display[8];
 154          u8 set_display[8];
 155          u8 set_temp[8];
 156          u8 temp_num;
 157          u8 temp_max=30;u8 temp_min=20;
 158          u8 key_count=0;
 159          u8 set_count=0;
 160          sbit relay=P0^4;
 161          sbit buzzer=P0^6;
 162          bit error_flag;
 163          
 164          void main()
 165          {
 166   1              All_Init();
 167   1              Timer0Init();
 168   1              Delay500ms();
 169   1              while(1)
 170   1              {
 171   2                      temperture= rd_temperature_f();
 172   2                      temp_display[0]=0x40;temp_display[1]=du[temp_num];temp_display[2]=0x40;temp_display[3]=0x00;
 173   2                      temp_display[4]=0x00;temp_display[5]=0x40;temp_display[6]=du[temperture/10];temp_display[7]=du[tempertur
             -e%10];
 174   2                      set_display[0]=0x40;set_display[5]=0x40;
 175   2                      if(temperture<temp_min)
 176   2                      {
 177   3                              temp_num=0;
C51 COMPILER V9.60.0.0   MAIN                                                              04/09/2021 10:13:34 PAGE 4   

 178   3                      }
 179   2                      else if(temperture<=temp_max)
 180   2                      {
 181   3                              temp_num=1;
 182   3                      }
 183   2                      else
 184   2                      {
 185   3                              temp_num=2;
 186   3                      }
 187   2                      if(key_count==2)        key_count=5;
 188   2                      if(key_count>7)         key_count=8;  
 189   2                      switch(key_value)            
 190   2                      {                                              
 191   3                              case 4: 
 192   3                                      key_count++;
 193   3                                      set_display[key_count]=du[9];
 194   3                                      set_temp[key_count]=9;
 195   3                                      break;
 196   3                              case 5: 
 197   3                                      key_count++;
 198   3                                      set_display[key_count]=du[6];
 199   3                                      set_temp[key_count]=6;
 200   3                                      break;
 201   3                              case 6:  
 202   3                                      key_count++;
 203   3                                      set_display[key_count]=du[3];
 204   3                                      set_temp[key_count]=3;
 205   3                                      break;
 206   3                              case 7:  
 207   3                                      key_count++;
 208   3                                      set_display[key_count]=du[0];
 209   3                                      set_temp[key_count]=0;
 210   3                                      break;
 211   3                              case 8:                 //设置
 212   3                                      set_count++;
 213   3                                      if(set_count==2)        
 214   3                                      {
 215   4                                              set_count=0;
 216   4                                              temp_max=set_temp[1]*10+set_temp[2];
 217   4                                              temp_min=set_temp[6]*10+set_temp[7];
 218   4                                              if(temp_min>temp_max)
 219   4                                              {
 220   5                                                      P2=(P2&0x1f)|0x80;P0=~0x02;P2&=0x1f;
 221   5                                                      error_flag=1;
 222   5                                              }
 223   4                                              else
 224   4                                              {
 225   5                                                      error_flag=0;
 226   5                                              }
 227   4                                      }
 228   3                                      break;
 229   3                              case 9:                 
 230   3                                      key_count++;
 231   3                                      set_display[key_count]=du[7];
 232   3                                      set_temp[key_count]=7;
 233   3                                      break;
 234   3                              case 10: 
 235   3                                      key_count++;
 236   3                                      set_display[key_count]=du[4];
 237   3                                      set_temp[key_count]=4;
 238   3                                      break;
 239   3                              case 11: 
C51 COMPILER V9.60.0.0   MAIN                                                              04/09/2021 10:13:34 PAGE 5   

 240   3                                      key_count++;
 241   3                                      set_display[key_count]=du[1];
 242   3                                      set_temp[key_count]=1;
 243   3                                      break;
 244   3                              case 12:                //清除
 245   3                                      key_count=0;
 246   3                                      set_display[1]=0x00;set_display[2]=0x00;set_display[6]=0x00;set_display[7]=0x00;
 247   3                                      break;
 248   3                              case 13: 
 249   3                                      key_count++;
 250   3                                      set_display[key_count]=du[8];
 251   3                                      set_temp[key_count]=8;
 252   3                                      break;
 253   3                              case 14: 
 254   3                                      key_count++;
 255   3                                      set_display[key_count]=du[5];
 256   3                                      set_temp[key_count]=5;
 257   3                                      break;
 258   3                              case 15: 
 259   3                                      key_count++;
 260   3                                      set_display[key_count]=du[2];
 261   3                                      set_temp[key_count]=2;
 262   3                                      break;
 263   3                              case 16: 
 264   3                                      break;
 265   3                              case 17: 
 266   3                                      break;
 267   3                              case 18: 
 268   3                                      break;
 269   3                              case 19: 
 270   3                                      break;
 271   3                      }
 272   2                      if(temp_num==0 || temp_num==1)
 273   2                      {
 274   3                              relay=0;buzzer=0;P2=(P2&0x1f)|0xa0;relay=0;buzzer=0;P2&=0x1f;
 275   3                      }
 276   2                      if(temp_num==2)
 277   2                      {
 278   3                              relay=1;buzzer=0;P2=(P2&0x1f)|0xa0;relay=1;buzzer=0;P2&=0x1f;
 279   3                      }
 280   2      
 281   2              }
 282   1      }
 283          
 284          bit blink_flag;
 285          void time0() interrupt 1
 286          {
 287   1              static int smg_count=0,count_key=0,i=0,led_count=0;
 288   1              smg_count++; count_key++;led_count++;
 289   1              if(count_key==14)
 290   1              {
 291   2                      key_value=Key_Scan();
 292   2                      count_key=0;
 293   2              }
 294   1              
 295   1              if(error_flag==0)
 296   1              {
 297   2                      if(temp_num==0)
 298   2                      {
 299   3                              if(led_count>800)
 300   3                              {
 301   4                                      led_count=0;
C51 COMPILER V9.60.0.0   MAIN                                                              04/09/2021 10:13:34 PAGE 6   

 302   4                                      blink_flag=~blink_flag;
 303   4                                      if(blink_flag)  {P2=(P2&0x1f)|0x80;P0=~0x01;P2&=0x1f;}
 304   4                                      else {P2=(P2&0x1f)|0x80;P0=0xff;P2&=0x1f;}
 305   4                              }
 306   3                      }
 307   2                      if(temp_num==1)
 308   2                      {
 309   3                              if(led_count>400)
 310   3                              {
 311   4                                      led_count=0;
 312   4                                      blink_flag=~blink_flag;
 313   4                                      if(blink_flag)  {P2=(P2&0x1f)|0x80;P0=~0x01;P2&=0x1f;}
 314   4                                      else {P2=(P2&0x1f)|0x80;P0=0xff;P2&=0x1f;}
 315   4                              }
 316   3                      }
 317   2                      if(temp_num==2)
 318   2                      {
 319   3                              if(led_count>200)
 320   3                              {
 321   4                                      led_count=0;
 322   4                                      blink_flag=~blink_flag;
 323   4                                      if(blink_flag)  {P2=(P2&0x1f)|0x80;P0=~0x01;P2&=0x1f;}
 324   4                                      else {P2=(P2&0x1f)|0x80;P0=0xff;P2&=0x1f;}
 325   4                              }
 326   3                      }
 327   2              }
 328   1              
 329   1              if(smg_count==3)
 330   1              {
 331   2                      smg_count=0;
 332   2                      P2=(P2&0x1f)|0xc0;P0=0x00;P2&=0x1f;
 333   2                      if(set_count==1)
 334   2                      {
 335   3                              P2=(P2&0x1f)|0xe0;P0=~set_display[i];P2&=0x1f;
 336   3                      }
 337   2                      else
 338   2                      {
 339   3                              P2=(P2&0x1f)|0xe0;P0=~temp_display[i];P2&=0x1f;
 340   3                      }
 341   2                      P2=(P2&0x1f)|0xc0;P0=wei[i];P2&=0x1f;P0=0xff;
 342   2                      i++;
 343   2                      if(i==8) i=0;
 344   2              }
 345   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1306    ----
   CONSTANT SIZE    =     18    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     40       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
